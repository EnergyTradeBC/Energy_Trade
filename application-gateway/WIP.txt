FATTO:

    MOBILE APPLICATION INTERFACE AND COMMUNICATION (REST):
        - created the structure for 2 different GET Aìand POST functions
        - created association between the functions and specific endpoints

    SMART METER COMMUNICATION (MQTT):
        - import paho.mqtt
        - mqtt communication management (connect, subscribe, ..) [info: https://www.emqx.com/en/blog/how-to-use-mqtt-in-golang]

    LISTENER FOR BC TRANSACTIONS:
        - structure for chaincode events listener
        - structure for channel blocks listener

    ENERGY CONTRACT:
        - GetAllAssets
        - CreateAsset
        - ReadAsset ==> qual è il formato dell'output? come lo posso gestire per ottenere le informazioni che desidero (quantità rimanente)
        - TransferAsset
        - DeleteAsset (ogni 15 minuti generiamo un nuovo asset e cancelliamo il precedente: è il modo più semplice di gestire la cosa a mio avviso 
                       => ogni 15 minuti, quindi prima di creare un nuovo asset o partecipare ad un'asta, prima viene fatto un ReadAsset per 
                       registrare le informazioni sul precedente asset rimasto invenduto (se c'è) e poi cancelliamo il precedente
                       asset, che quindi avrà sempre lo stesso ID, e.g. "energy_<org_n>")

    MONEY CONTRACT:

    AUCTION CONTRACT:
        - queryAuctionByID
        - queryBidByID
        - createAuction
        - makeBid
        - submitBid
        - closeAuction
        - revealBid
        - endAuction

DA FARE:

    MOBILE APPLICATION INTERFACE AND COMMUNICATION (REST):
        - binding POST and GET functions with real needed functions (addMoney? Altri?)
        - management of inputs in POST funcs and outputs in GET funcs

    SMART METER COMMUNICATION (MQTT):
        - logic of action after receiveng a message from the smart meter topic (format of the message?)

    LISTENER FOR BC TRANSACTIONS:
        - try to understand how to manage formats of the block events (HEADER, DATA and METADATA) (if necessary)
        - look to the chaincode events structure and content (Payload)
        - logic of action after receiveng a chaincode event (for MONEY, ENERGY and AUCTION) (how we will manage the last transactions of the auction?)

    ENERGY CONTRACT:
        - UpdateAsset (lo facciamo anche nella application o non serve a nulla e viene utilizzato solo come conseguenza del transfer?)
